import random
import math
import numpy as npy
import matplotlib.pyplot as plt; plt.rcdefaults()
import matplotlib.pyplot as plt
from numpy.random import rand
 
def simulated_annealing(sampleList,matrix):
    """Peforms simulated annealing to find a solution"""
    initial_temp = 10000
    final_temp = 1
    alpha = 1
    
    current_temp = initial_temp
 
    # Start by initializing the current state with the initial state
    current_list = sampleList
    solution = current_list
    nextList = []
 
    while current_temp > final_temp:
        #print(current_temp)
 
        nextList = solution.copy()
        bsolution = batching(solution)
 
        swap_random(nextList)
        bnextList = batching(nextList)
 
        # Check if neighbor is best so far
        distance_diff = get_distance_total(bsolution,matrix,True) - get_distance_total(bnextList,matrix,True)
        acceptance = math.exp(-distance_diff/current_temp)
        # if the new solution is better, accept it or accept it with a probability of e^(-cost/temp)
        if distance_diff > 0:
            solution = nextList
            
        elif acceptance < rand():
            solution = nextList
            
        # decrement the temperature
        current_temp -= alpha
        print("Temperature: ", current_temp, "Distance: ", distance_diff)
    return solution
 
def swap_random(seq):
    idx = range(len(seq))
    i1, i2 = random.sample(idx, 2)
    seq[i1], seq[i2] = seq[i2], seq[i1]
 
def batching(list):
    batchedList = []
    x = 0
    y = len(list)
    for i in range (x,y,5):
        x = i
        batchedList.append(list[x:x+5])
 
    batchedList2 = []
    blist = []
    for i in range(len(batchedList)):
        for j in batchedList[i]:
            if j not in blist:
                blist.append(j)
        batchedList2.append(blist)
        blist = []
 
    return batchedList2
        
 
def find(element, matrix):
    #find array index(coordinate [y,x]) for element(item)
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j] == element:
                return (i, j)
 
def get_distance(coord1, coord2):
    #find horizontal(x) and vertical(y) distance between two elements
    x = 0
    y1 = clean_coord(coord1[0])
    y2 = clean_coord(coord2[0])
    y = abs(y2 - y1)
    if coord1[1] < 6 and coord2[1] < 6 :
        x = coord1[1] + coord2[1]
    elif coord1[1] >= 6 and coord2[1] >= 6 :
        x1 = 11 - coord1[1]
        x2 = 11 - coord2[1]
        x = x1 + x2
    else :
        if coord1[1] < 6:
            x1 = coord1[1]
        elif coord1[1] >= 6: 
            x1 = 11 - coord1[1]
        if coord2[1] < 6:
            x2 = coord2[1]
        elif coord2[1] >= 6:
            x2 = 11 - coord2[1] 
        if x1 < x2:
            x = x1 + (11 - x2)
        elif x2 < x1:
            x = x2 + (11 - x1)
        if x1 == x2:
            x = 0
    
    return (x,y)
 
def clean_coord(coord):
    #determine the location of 'x' for a certain number
    if coord == 1 or coord == 3:
        coord = 2
    elif coord == 4 or coord == 6:
        coord = 5
    elif coord == 7 or coord == 9:
        coord = 8
    elif coord == 10 or coord == 12:
        coord = 11
    elif coord == 13 or coord == 15:
        coord = 14
    return coord
 
def get_distance_total(elist,matrix,batch):
    total_distance = 0
    #if unbatched
    if batch == False:
        for i in range(len(elist)):
            c1 = (0,0)
            c2 = find(elist[i],whmatrix)
            d = get_distance(c1,c2)
            total_distance += (d[0]+d[1])
 
    #batched list
    else:
        for i in range(len(elist)):
            for j in range(len(elist[i])):
                if j == 0:
                    c1 = (0,0)
                    c2 = find(elist[i][j],whmatrix)
                    d = get_distance(c1,c2)
                    total_distance += (d[0]+d[1])
                else:
                    c1 = c2
                    c2 = find(elist[i][j],whmatrix)
                    d = get_distance(c1,c2)
                    total_distance += (d[0]+d[1])
 
    return total_distance
 
if __name__ == '__main__':
    whmatrix = [['x','x','x','x','x','x','x','x','x','x','x','x'],#0
        ['x','1','2','3','4','5','6','7','8','9','10','x'],#1
        ['x','x','x','x','x','x','x','x','x','x','x','x'],#2
        ['x','20','19','18','17','16','15','14','13','12','11','x'],#3
        ['x','21','22','23','24','25','26','27','28','29','30','x'],#4
        ['x','x','x','x','x','x','x','x','x','x','x','x'],#5
        ['x','40','39','38','37','36','35','34','33','32','31','x'],#6
        ['x','41','42','43','44','45','46','47','48','49','50','x'],#7
        ['x','x','x','x','x','x','x','x','x','x','x','x'],#8
        ['x','60','59','58','57','56','55','54','53','52','51','x'],#9
        ['x','61','62','63','64','65','66','67','68','69','70','x'],#10
        ['x','x','x','x','x','x','x','x','x','x','x','x'],#11
        ['x','80','79','78','77','76','75','74','73','72','71','x'],#12
        ['x','81','82','83','84','85','86','87','88','89','90','x'],#13
        ['x','x','x','x','x','x','x','x','x','x','x','x'],#14
        ['x','100','99','98','97','96','95','94','93','92','91','x'],#15
        ['x','x','x','x','x','x','x','x','x','x','x','x']]#16
    
    sampleList1000 = ['89', '4', '28', '98', '6', '59', '4', '44', '12', '81', '34', '14', '95', '65', '74', '70', '58', '32', '13', '49', '45', '70', '49', '54', '8', '95', '33', '62', '37', '16', '36', '89', '61', '86', '9', '37', '98', '49', '3', '20', '81', '28', '27', '82', '90', '98', '8', '13', '18', '13', '72', '49', '39', '31', '78', '92', '85', '12', '70', '65', '71', '97', '26', '68', '89', '85', '87', '68', '1', '71', '74', '43', '78', '55', '84', '43', '12', '93', '75', '69', '15', '27', '91', '85', '40', '12', '52', '69', '32', '18', '9', '1', '13', '41', '60', '49', '66', '88', '60', '53', '74', '25', '4', '76', '46', '93', '14', '56', '77', '33', '85', '1', '81', '23', '59', '75', '77', '6', '75', '57', '90', '67', '90', '74', '15', '62', '16', '49', '60', '27', '67', '90', '54', '83', '97', '28', '78', '39', '72', '37', '8', '27', '65', '41', '69', '25', '15', '67', '96', '76', '18', '73', '85', '7', '46', '20', '40', '31', '53', '51', '2', '68', '68', '43', '6', '93', '86', '19', '69', '10', '83', '23', '30', '68', '24', '44', '35', '2', '45', '32', '18', '94', '42', '97', '31', '66', '23', '74', '79', '49', '76', '48', '46', '63', '69', '8', '23', '71', '58', '10', '18', '99', '100', '17', '34', '71', '42', '30', '12', '67', '6', '62', '37', '88', '70', '30', '47', '89', '18', '85', '26', '22', '75', '99', '18', '79', '53', '3', '98', '80', '93', '53', '4', '19', '87', '24', '92', '77', '41', '54', '59', '100', '85', '33', '70', '4', '48', '63', '21', '4', '66', '62', '64', '65', '100', '37', '31', '97', '23', '84', '72', '31', '66', '72', '54', '61', '57', '47', '100', '20', '12', '45', '74', '59', '29', '7', '16', '9', '56', '65', '12', '81', '59', '88', '68', '34', '19', '74', '79', '93', '81', '88', '37', '46', '8', '36', '5', '16', '15', '41', '72', '78', '52', '92', '63', '48', '57', '39', '34', '80', '86', '28', '69', '10', '5', '72', '22', '88', '27', '63', '21', '100', '92', '35', '56', '90', '52', '37', '33', '65', '66', '74', '88', '96', '24', '43', '33', '74', '47', '36', '1', '15', '44', '92', '95', '56', '20', '14', '65', '27', '82', '30', '93', '59', '12', '66', '76', '95', '67', '93', '55', '52', '4', '95', '63', '55', '64', '54', '42', '30', '10', '55', '74', '94', '44', '44', '42', '15', '76', '86', '90', '45', '31', '38', '43', '48', '20', '61', '70', '20', '8', '52', '45', '27', '93', '79', '46', '92', '91', '63', '32', '9', '34', '8', '37', '63', '30', '37', '72', '47', '15', '24', '31', '31', '36', '84', '20', '68', '91', '7', '63', '50', '20', '10', '23', '91', '99', '97', '54', '42', '6', '3', '10', '41', '43', '98', '68', '90', '56', '64', '66', '46', '80', '31', '67', '8', '27', '69', '72', '79', '48', '26', '50', '19', '11', '47', '91', '20', '60', '77', '17', '21', '52', '37', '57', '74', '39', '38', '81', '75', '39', '10', '36', '12', '8', '49', '88', '25', '15', '94', '38', '65', '99', '76', '49', '42', '94', '8', '21', '45', '49', '35', '13', '3', '95', '11', '92', '14', '81', '24', '84', '92', '73', '87', '79', '88', '12', '49', '48', '17', '40', '23', '55', '30', '84', '8', '18', '37', '73', '2', '62', '28', '8', '18', '88', '92', '43', '81', '41', '98', '93', '91', '60', '82', '51', '17', '1', '55', '43', '66', '7', '32', '66', '98', '68', '92', '100', '73', '35', '1', '36', '3', '60', '73', '74', '97', '98', '81', '90', '24', '55', '56', '55', '15', '72', '44', '21', '31', '79', '57', '71', '87', '63', '55', '43', '60', '67', '16', '14', '75', '49', '82', '73', '83', '57', '95', '23', '76', '4', '67', '28', '94', '75', '80', '99', '15', '3', '25', '90', '35', '93', '48', '33', '31', '13', '66', '2', '13', '83', '80', '3', '96', '20', '37', '48', '1', '78', '78', '48', '66', '34', '15', '3', '18', '91', '32', '13', '84', '5', '73', '99', '56', '25', '85', '9', '47', '55', '36', '11', '28', '39', '84', '39', '93', '85', '57', '51', '59', '42', '22', '4', '42', '38', '53', '92', '8', '6', '76', '78', '50', '11', '91', '46', '48', '51', '33', '93', '68', '41', '93', '93', '79', '37', '18', '77', '30', '54', '24', '99', '31', '91', '26', '58', '72', '98', '5', '88', '35', '20', '92', '70', '19', '25', '62', '75', '44', '20', '37', '98', '50', '58', '56', '59', '97', '68', '79', '11', '43', '77', '44', '5', '100', '49', '47', '82', '23', '44', '77', '98', '42', '21', '38', '1', '61', '11', '10', '59', '96', '45', '27', '75', '44', '9', '14', '32', '67', '44', '14', '72', '78', '85', '5', '39', '73', '85', '61', '18', '54', '51', '25', '77', '4', '48', '24', '45', '79', '50', '83', '7', '59', '22', '90', '97', '60', '51', '4', '49', '1', '57', '4', '34', '3', '65', '70', '13', '17', '52', '84', '38', '61', '30', '15', '20', '64', '42', '1', '23', '60', '3', '64', '22', '9', '46', '67', '87', '19', '75', '89', '75', '7', '66', '32', '34', '100', '16', '64', '70', '8', '2', '100', '91', '99', '9', '12', '30', '35', '93', '35', '2', '61', '77', '2', '84', '31', '53', '6', '89', '29', '80', '77', '52', '29', '44', '22', '77', '38', '88', '40', '20', '93', '40', '85', '35', '66', '65', '5', '81', '75', '37', '90', '20', '5', '95', '41', '86', '14', '43', '12', '14', '18', '66', '33', '40', '40', '73', '14', '1', '63', '84', '100', '5', '84', '31', '48', '60', '53', '77', '32', '98', '42', '15', '54', '12', '54', '24', '22', '64', '26', '80', '75', '20', '40', '88', '35', '63', '17', '18', '94', '64', '86', '65', '11', '44', '11', '64', '32', '92', '59', '97', '11', '65', '50', '11', '49', '4', '46', '23', '49', '3', '75', '34', '22', '49', '66', '72', '43', '52', '49', '89', '6', '72', '92', '93', '18', '90', '18', '44', '41', '13', '1', '90', '86', '61', '6', '46', '80', '38', '1', '8', '41', '43', '29', '12', '97', '32', '66', '5', '25', '60', '74', '97', '16', '80', '46', '16', '87', '26', '44', '67', '97', '23', '30', '14', '31', '56', '39', '73', '81', '43', '52', '34', '27', '67', '19', '62', '74', '71', '72', '14', '20', '88', '26', '28', '56', '38', '88', '95', '57', '69', '59']
    sampleList500 = ['17', '42', '87', '88', '74', '15', '84', '22', '59', '66', '45', '26', '59', '88', '42', '91', '10', '15', '50', '64', '62', '2', '55', '26', '80', '42', '97', '68', '77', '95', '52', '60', '26', '70', '48', '90', '88', '11', '68', '70', '11', '99', '10', '57', '54', '42', '82', '31', '10', '72', '82', '54', '55', '10', '25', '61', '89', '84', '84', '78', '7', '91', '82', '60', '6', '100', '78', '88', '94', '46', '62', '48', '31', '46', '61', '48', '98', '80', '8', '16', '9', '28', '45', '1', '80', '34', '52', '12', '66', '61', '66', '4', '6', '79', '14', '64', '85', '60', '41', '71', '71', '16', '11', '63', '21', '83', '11', '36', '73', '13', '98', '63', '29', '100', '87', '65', '83', '77', '93', '67', '90', '25', '44', '18', '29', '6', '35', '17', '18', '40', '71', '19', '77', '90', '46', '78', '57', '21', '17', '55', '95', '10', '12', '27', '28', '67', '79', '52', '45', '14', '61', '89', '30', '21', '55', '73', '64', '19', '43', '2', '8', '76', '55', '42', '33', '9', '78', '81', '75', '88', '80', '30', '42', '31', '12', '78', '78', '57', '66', '76', '64', '18', '84', '33', '32', '58', '74', '63', '48', '17', '74', '40', '34', '2', '76', '3', '28', '10', '6', '64', '44', '97', '64', '66', '70', '94', '80', '94', '73', '36', '23', '17', '2', '53', '8', '53', '8', '34', '57', '98', '33', '15', '89', '94', '75', '37', '12', '44', '11', '25', '32', '65', '28', '62', '16', '14', '28', '23', '63', '31', '44', '72', '8', '29', '63', '35', '92', '91', '48', '18', '85', '5', '73', '88', '55', '28', '5', '56', '15', '1', '48', '72', '61', '29', '93', '29', '96', '48', '45', '57', '51', '91', '71', '80', '100', '65', '1', '35', '41', '22', '34', '30', '77', '53', '22', '74', '42', '12', '68', '31', '2', '99', '14', '65', '63', '34', '46', '45', '29', '42', '99', '84', '56', '54', '90', '68', '22', '28', '63', '33', '28', '92', '45', '6', '45', '63', '61', '51', '40', '54', '33', '45', '71', '85', '79', '76', '18', '46', '92', '49', '38', '12', '82', '20', '68', '82', '62', '28', '77', '7', '31', '55', '25', '22', '38', '100', '22', '58', '10', '94', '8', '35', '36', '52', '93', '2', '84', '89', '15', '15', '75', '72', '70', '12', '99', '55', '88', '30', '55', '11', '73', '25', '20', '20', '32', '33', '68', '97', '15', '9', '29', '68', '31', '25', '67', '68', '4', '97', '68', '48', '46', '41', '37', '3', '13', '80', '59', '49', '4', '92', '95', '82', '30', '53', '21', '15', '9', '34', '21', '57', '79', '60', '35', '86', '53', '50', '11', '49', '82', '23', '2', '91', '72', '73', '58', '17', '49', '61', '64', '33', '87', '24', '97', '7', '15', '73', '68', '72', '37', '11', '48', '90', '57', '38', '56', '3', '83', '3', '77', '69', '69', '23', '94', '13', '34', '2', '41', '9', '88', '60', '12', '93', '4', '94', '93', '49', '92', '33', '14', '45', '96', '63', '89', '26', '17', '82', '37', '10', '46', '31', '14', '9', '63', '66', '71', '86', '36', '4', '54', '17', '56', '64', '39', '92', '87', '24', '93', '40', '24', '71']
    sampleList100 = ['80', '54', '68', '54', '99', '52', '1', '76', '1', '18', '79', '38', '46', '27', '41', '58', '77', '59', '99', '49', '67', '91', '96', '81', '63', '12', '30', '10', '74', '88', '51', '100', '40', '87', '23', '40', '99', '73', '49', '11', '10', '22', '80', '11', '51', '46', '19', '41', '6', '13', '42', '69', '96', '80', '2', '71', '55', '55', '97', '89', '21', '18', '66', '64', '27', '73', '91', '93', '20', '27', '6', '72', '7', '61', '82', '39', '58', '36', '39', '33', '26', '91', '43', '74', '74', '95', '34', '73', '8', '10', '34', '54', '89', '36', '65', '44', '52', '73', '84', '95']
    sampleList50 = ['70', '68', '98', '69', '69', '81', '78', '31', '80', '3', '48', '91', '69', '12', '42', '51', '65', '90', '10', '80', '60', '94', '36', '38', '16', '29', '91', '45', '48', '6', '40', '34', '74', '27', '10', '62', '56', '47', '95', '89', '92', '75', '50', '27', '38', '48', '87', '66', '46', '26']
    sampleList20 = ['94', '43', '29', '73', '20', '97', '19', '56', '5', '43', '66', '33', '43', '4', '39', '42', '79', '60', '11', '79']
    
# generate list with random numbers
#for i in range(0,500):
#  n = random.randint(1,100)
#  sampleList.append(str(n))
#print(sampleList)
 
    batchedList1000 = batching(sampleList1000)
    batchedList500 = batching(sampleList500)
    batchedList100 = batching(sampleList100)
    batchedList20 = batching(sampleList20)
    batchedList50 = batching(sampleList50)
 
    simAnneal1000 = simulated_annealing(sampleList1000,whmatrix)
    simAnneal1000 = batching(simAnneal1000)
    simAnneal500 = simulated_annealing(sampleList500,whmatrix)
    simAnneal500 = batching(simAnneal500)
    simAnneal100 = simulated_annealing(sampleList100,whmatrix)
    simAnneal100 = batching(simAnneal100)
    simAnneal50 = simulated_annealing(sampleList50,whmatrix)
    simAnneal50 = batching(simAnneal50)
    simAnneal20 = simulated_annealing(sampleList20,whmatrix)
    simAnneal20 = batching(simAnneal20)
 
    t2_1000 = get_distance_total(batchedList1000,whmatrix,True)
    t2_500 = get_distance_total(batchedList500,whmatrix,True)
    t2_100 = get_distance_total(batchedList100,whmatrix,True)
    t2_20 = get_distance_total(batchedList20,whmatrix,True)
    t2_50 = get_distance_total(batchedList50,whmatrix,True)
 
    t4_1000 = get_distance_total(simAnneal1000,whmatrix,True)
    t4_500 = get_distance_total(simAnneal500,whmatrix,True)    
    t4_100 = get_distance_total(simAnneal100,whmatrix,True)
    t4_20 = get_distance_total(simAnneal20,whmatrix,True)
    t4_50 = get_distance_total(simAnneal50,whmatrix,True)
 
    plt.figure(1)
    X = [[t2_20,t4_20],
         [t2_50,t4_50],
         [t2_100,t4_100],
         [t2_500,t4_500],
         [t2_1000,t4_1000]]
    a = [t2_20,t4_20]
    b = [t2_50,t4_50]
    c = [t2_100,t4_100]
    d = [t2_500,t4_500]
    e = [t2_1000,t4_1000]
 
    sa = (t4_20, t4_50, t4_100, t4_500, t4_1000)
    ba = (t2_20, t2_50, t2_100, t2_500, t2_1000)
    n_groups = 5
    index = npy.arange(n_groups)
    bar_width = 0.35
    opacity = 0.8
 
    rects1 = plt.bar(index, sa, bar_width,
    alpha=opacity,
    color='b',
    label='Simulated Annealing')
 
    rects2 = plt.bar(index + bar_width, ba, bar_width,
    alpha=opacity,
    color='g',
    label='Batched FCFS')
 
    plt.xlabel('List Size')
    plt.ylabel('Distance')
    plt.title('Distance by List Size')
    plt.xticks(index + bar_width, ('20', '50', '100', '500','1000'))
    plt.legend(title = "Batching Method")
 
    plt.show()
 
    print("Overview:")
    print("Distance for list of 20:\n","Batched FCFS|\t", "Simulated Annealing|\n", t2_20,"m\t\t",t4_20,"m\n"  )
    print("Distance for list of 50:\n","Batched FCFS|\t", "Simulated Annealing|\n", t2_50,"m\t\t",t4_50,"m\n"  )
    print("Distance for list of 100:\n","Batched FCFS|\t", "Simulated Annealing|\n", t2_100,"m\t\t",t4_100,"m\n"  )
    print("Distance for list of 500:\n","Batched FCFS|\t", "Simulated Annealing|\n", t2_500,"m\t\t",t4_500,"m\n"  )
    print("Distance for list of 1000:\n","Batched FCFS|\t", "Simulated Annealing|\n", t2_1000,"m\t\t",t4_1000,"m"  )
